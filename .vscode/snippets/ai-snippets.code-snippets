{
    "AI Component": {
        "prefix": "aicomp",
        "body": [
            "import React, { useState, useEffect } from 'react';",
            "import { ${1:ComponentProps} } from './${1:Component}.types';",
            "import { use${1:Component}Logic } from './${1:Component}.logic';",
            "import styles from './${1:Component}.module.css';",
            "",
            "/**",
            " * ${1:Component} - ${2:Description}",
            " * @ai-generated",
            " * @tested",
            " * @documented",
            " */",
            "export const ${1:Component}: React.FC<${1:ComponentProps}> = ({",
            "  ${3:props}",
            "}) => {",
            "  const logic = use${1:Component}Logic();",
            "  ",
            "  return (",
            "    <div className={styles.container}>",
            "      ${0:// Implementation}",
            "    </div>",
            "  );",
            "};",
            "",
            "// Auto-generate tests",
            "if (import.meta.env.DEV) {",
            "  import('./${1:Component}.test').then(({ runTests }) => runTests());",
            "}"
        ]
    },
    "AI API Endpoint": {
        "prefix": "aiapi",
        "body": [
            "import { Request, Response, NextFunction } from 'express';",
            "import { validateRequest } from '@/middleware/validation';",
            "import { ${1:Service} } from '@/services/${2:service}';",
            "import { logger } from '@/utils/logger';",
            "import { cache } from '@/utils/cache';",
            "",
            "/**",
            " * ${3:Endpoint description}",
            " * @route ${4:METHOD} /api/${5:path}",
            " * @ai-generated",
            " * @tested",
            " * @documented",
            " */",
            "export const ${6:handlerName} = [",
            "  // Middleware stack",
            "  validateRequest(${7:schema}),",
            "  cache.middleware({ ttl: ${8:300} }),",
            "  ",
            "  async (req: Request, res: Response, next: NextFunction) => {",
            "    try {",
            "      const result = await ${1:Service}.${9:method}(req.body);",
            "      ",
            "      logger.info('${6:handlerName} success', { userId: req.user?.id });",
            "      ",
            "      res.json({",
            "        success: true,",
            "        data: result,",
            "        timestamp: new Date().toISOString()",
            "      });",
            "    } catch (error) {",
            "      logger.error('${6:handlerName} error', error);",
            "      next(error);",
            "    }",
            "  }",
            "]"
        ]
    },
    "AI Test Suite": {
        "prefix": "aitest",
        "body": [
            "import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';",
            "import { render, screen, fireEvent, waitFor } from '@testing-library/react';",
            "import { ${1:Component} } from './${1:Component}';",
            "",
            "describe('${1:Component}', () => {",
            "  let container: HTMLElement;",
            "  ",
            "  beforeEach(() => {",
            "    vi.clearAllMocks();",
            "    container = document.createElement('div');",
            "    document.body.appendChild(container);",
            "  });",
            "  ",
            "  afterEach(() => {",
            "    document.body.removeChild(container);",
            "  });",
            "  ",
            "  describe('Rendering', () => {",
            "    it('should render correctly', () => {",
            "      render(<${1:Component} />);",
            "      expect(screen.getByTestId('${2:testId}')).toBeInTheDocument();",
            "    });",
            "    ",
            "    it('should match snapshot', () => {",
            "      const { container } = render(<${1:Component} />);",
            "      expect(container).toMatchSnapshot();",
            "    });",
            "  });",
            "  ",
            "  describe('Behavior', () => {",
            "    it('should handle ${3:action}', async () => {",
            "      render(<${1:Component} />);",
            "      ",
            "      const element = screen.getByTestId('${2:testId}');",
            "      fireEvent.click(element);",
            "      ",
            "      await waitFor(() => {",
            "        expect(${4:assertion}).toBe(${5:expected});",
            "      });",
            "    });",
            "  });",
            "  ",
            "  describe('Edge Cases', () => {",
            "    it('should handle error state', () => {",
            "      ${0:// Test implementation}",
            "    });",
            "    ",
            "    it('should handle loading state', () => {",
            "      // Test implementation",
            "    });",
            "  });",
            "});"
        ]
    }
}
